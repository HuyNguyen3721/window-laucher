package com.viewpager.dndp.views;

import android.graphics.Color;
import android.graphics.drawable.Drawable;

/**
 * the DNDItem class is only a template used for creating views inside a DNDPager.
 */
public class DNDItem {

    /**
     * width & height of a button
     */
    public int cellHeightRatio = 1, cellWidthRatio =1;

    /**
     * coordinates of the button from the DNDPager's layout,
     * setting the value to -1 will be assigned by DNDPager instead, both must be -1 to apply.
     */
    public int x = -1,y = -1;

    /**
     * the text field of a button
     */
    public String text = "";

    /**
     * assigned by DNDPager class
     */
    public DNDButton dndButton;
    /**
     * background image of the button, can be null.
     */
    public Drawable backgroundImage = null;
    /**
     * background color of the button, only applied when background image is null.
     */
    public int backgroundColor = Color.parseColor(DNDUtils.COLOR_PALETTE[0][1]);
    /**
     * page number of a button, setting the value to -1 will be assigned by DNDPager instead.
     */
    public int pageNum = -1;

    /**
     * determine if the item is already added in the DNDPager class.
     */
    public boolean isAdded = false;
    /**
     * optional. An id of the button mostly applied for calling onclick envents.
     */
    public String tag = "";


    public DNDItem(){

    }

    /**
     * Used for extracting the actual coordinates, size, and other properties assigned by the DNDPager class,
     * this properties are base on it's button counter part inside the class(DNDPager).
     * It should be called after successfully implemented the items to the DNDPager class.
     */
    public void validateProperties(){
        if(isAdded && dndButton != null){
            this.cellHeightRatio = dndButton.getCellHeightRatio();
            this.cellWidthRatio = dndButton.getCellWidthRatio();
            this.x = dndButton.getPositionX();
            this.y = dndButton.getPositionY();
            this.text = dndButton.getText().toString();
            this.backgroundImage = dndButton.getBackgroundImage();
            this.backgroundColor = dndButton.getColor();
            this.pageNum = dndButton.getLastPager().getPageNum();
        }
    }

    /**
     * The constructor only accepts the required fields while the optional fields are stripped off,
     * the optional fields are then provided by the DNDPager class.
     * @param text - [required field] set the text field of a button
     * @param backgroundImage - [required field] background image of the button, can be null.
     * @param backgroundColor - [required field] background color of the button, it is an alternative background if background image is null.
     * @param tag - [required field] gives an id to a button, it does not give restrictions of a tag already exist. Can be called by using DNDButton.getTag()
     */
    public DNDItem(String text, Drawable backgroundImage, int backgroundColor, String tag) {
        this.text = text;
        this.backgroundImage = backgroundImage;
        this.backgroundColor = backgroundColor;
        this.tag = tag;
    }

    /**
     * The constructor applies both required and optional fields.
     * for optional fields, reapplying the default values are generated by the DNDPager class.
     * Note: x & y are preferred to be provided by the DNDPager class, assign both values -1.
     * Note: items with the same coordinates x & y are possible to overlap, only occurs if the values are manually entered.
     *
     * @param text - [required field] set the text field of a button
     * @param cellHeightRatio - value must be greater than or equal to one (1), it is also must not be greater than the layout's number of rows.
     * @param cellWidthRatio - value must be greater than or equal to one (1), it is also must not be greater than the layout's number of columns.
     * @param x - starts at 0 from left to right, value must not be greater than the layout's number of columns.
     * @param y - starts at 0 from top to bottom, value must not be greater than the layout's number of rows.
     * @param backgroundImage - [required field] background image of the button, can be null.
     * @param backgroundColor - [required field] background color of the button, it is an alternative background if background image is null.
     * @param pageNum - set which page to apply the item, commonly used for FCollectionAdapter (ViewPager). Value starts from 0.
     * @param tag - [required field] gives an id to a button, it does not give restrictions of a tag already exist. Can be called by using DNDButton.getTag()
     */
    public DNDItem(String text, int cellHeightRatio, int cellWidthRatio, int x, int y, Drawable backgroundImage, int backgroundColor, int pageNum, String tag) {
        this.cellHeightRatio = cellHeightRatio;
        this.cellWidthRatio = cellWidthRatio;
        this.x = x;
        this.y = y;
        this.text = text;
        this.backgroundImage = backgroundImage;
        this.backgroundColor = backgroundColor;
        this.pageNum = pageNum;
        this.tag = tag;
    }
}
